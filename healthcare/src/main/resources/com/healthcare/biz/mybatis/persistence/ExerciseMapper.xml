<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.healthcare.biz.mybatis.persistence.ExerciseMapper">

	<select id="getStudentActivity" parameterType="java.util.Map" resultType="Activity">
		SELECT 
		    A.regist_id,
		    A.student_id,
		    DATE_FORMAT(A.reg_datetime, '%Y-%m-%d') reg_datetime,
		    A.sports_id,
		    A.steps,
		    A.calorie,
		    A.distance,
		    A.bmi_status,
		    B.alias sports_name,
		    B.small_image_path,
		    B.large_image_path,
		    (SELECT 
		            regist_id
		        FROM
		            activity_registration
		        WHERE
		            student_id = #{userId} <![CDATA[ 
		                AND reg_datetime < A.reg_datetime ]]>
		        ORDER BY reg_datetime DESC
		        LIMIT 1) regist_id_prev,
		    (SELECT 
		            regist_id
		        FROM
		            activity_registration
		        WHERE 
		            student_id = #{userId} <![CDATA[ 
		                AND reg_datetime > A.reg_datetime ]]>
		        ORDER BY reg_datetime ASC
		        LIMIT 1) regist_id_next
		FROM
		    activity_registration A
		        JOIN
		    activity_stports B ON A.sports_id = B.sports_id
		WHERE
		    student_id = #{userId}
		    <if test="exerciseId != null and exerciseId !='' ">
		    	and A.regist_id = #{exerciseId}
		    </if>
		ORDER BY reg_datetime DESC
		LIMIT 1
	</select>
	
	<select id="getStudentActivityChart" parameterType="java.util.Map" resultType="Activity">
		SELECT 
		    DATE_FORMAT(reg_datetime, '%m/%d') reg_datetime,
		    B.alias sports_name,
		    A.calorie,
		    A.steps,
		    A.distance
		FROM
		    activity_registration A
		        JOIN
		    activity_stports B ON A.sports_id = B.sports_id
		WHERE
		    A.student_id = #{userId}
		    <if test="exerciseId != null and exerciseId !='' "> <![CDATA[ 
		        AND A.reg_datetime <= (SELECT ]]>
		            reg_datetime
		        FROM
		            activity_registration
		        WHERE
		            regist_id = #{exerciseId})
		    </if>
		ORDER BY A.reg_datetime DESC
		LIMIT 4
	</select>
	
	<select id="getStudentActivityHistory" parameterType="java.util.Map" resultType="Activity">
		SELECT 
			A.regist_id,
		    DATE_FORMAT(reg_datetime, '%Y.%m.%d') reg_datetime,
		    B.alias sports_name,
		    A.calorie,
		    A.steps,
		    A.distance,
		    B.small_image_path
		FROM
		    activity_registration A
		        JOIN
		    activity_stports B ON A.sports_id = B.sports_id
		WHERE
		    A.student_id = #{userId}
		    <if test="exerciseId != null and exerciseId !='' "> <![CDATA[ 
		        AND A.reg_datetime < (SELECT ]]>
		            reg_datetime
		        FROM
		            activity_registration
		        WHERE
		            regist_id = #{exerciseId})
		    </if>
		ORDER BY A.reg_datetime DESC
		LIMIT 10
	</select>
	
	<select id="getStudentActivityRestCnt" parameterType="java.util.Map" resultType="java.lang.Integer">
		SELECT 
			count(*)
		FROM
		    activity_registration A
		        JOIN
		    activity_stports B ON A.sports_id = B.sports_id
		WHERE
		    A.student_id = #{userId} <![CDATA[ 
		        AND A.reg_datetime < (SELECT ]]>
		            reg_datetime
		        FROM
		            activity_registration
		        WHERE
		            regist_id = #{exerciseId})
		ORDER BY A.reg_datetime DESC
		LIMIT 10
	</select>
	
	<select id="getMainRangking" parameterType="java.util.Map" resultType="java.lang.String">
		SELECT 
		    ROWNUM
		FROM
		    (SELECT 
		        @RNUM:=@RNUM + 1 AS ROWNUM, O.*
		    FROM
		        (SELECT @RNUM:=0) R, (SELECT 
		        *
		    FROM
		        (SELECT 
		        A.regist_id,
		            A.reg_datetime,
		            A.student_id,
		            A.sports_id,
		            MAX(A.calorie) calorie,
		            B.School_ID,
		            B.Grade_ID,
		            B.Class
		    FROM
		        activity_registration A
		    JOIN school_register B ON A.student_id = B.Student_ID
		        AND B.school_year = #{school_year}
		        AND B.school_id = #{school_id}
		        <if test="type=='grade' or type=='class' ">
		        AND B.grade_id = #{grade_id}
		        </if>
		        <if test="type =='class' ">
		        AND B.class = #{class}
		        </if>
		    WHERE
		        A.reg_datetime LIKE CONCAT(#{reg_datetime},'%')
		            AND A.sports_id = #{sports_id}
		    GROUP BY A.student_id) D
		    ORDER BY D.calorie DESC) O) Z
		WHERE
		    student_id = #{userId}
	</select>
	
	<select id="getAverage" parameterType="java.util.Map" resultType="Activity">
		SELECT 
			count(*) cnt,
	        <if test="avg_type =='calorie' ">
		    IFNULL(ROUND(AVG(calorie)),0) avg
	        </if>
	        <if test="avg_type =='step' ">
		    IFNULL(ROUND(AVG(steps)),0) avg
	        </if>
	        <if test="avg_type =='distance' ">
		    IFNULL(ROUND(AVG(distance)),0) avg
	        </if>
		FROM( SELECT * FROM(
		SELECT 
			A.student_id, A.calorie, A.steps, A.distance
		FROM
		    activity_registration A
		        JOIN
		    school_register B ON A.student_id = B.Student_ID
		        AND B.School_Year = #{school_year}
		        AND B.grade_id = #{grade_id}
		        <if test="type=='class' or type=='school' ">
		        AND B.School_ID = #{school_id}
		        </if>
		        <if test="type =='class' ">
		        AND B.class = #{class}
		        </if>
		WHERE
		    A.reg_datetime LIKE CONCAT(#{reg_datetime},'%')
		        AND A.sports_id = #{sports_id}
		        AND A.bmi_status = #{bmi_status}
		ORDER BY A.reg_datetime desc) Z
		GROUP BY Z.student_id) ZZ        
	</select>
	
</mapper>